generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  bio       String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts        Post[]
  comments     Comment[]
  chatSessions ChatSession[]
  chatMessages ChatMessage[]

  @@map("users")
}

model Post {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  content       String
  excerpt       String?
  featuredImage String?
  status        PostStatus  @default(DRAFT)
  type          PostType    @default(POST)
  metaTitle     String?
  metaDescription String?
  publishedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  authorId   String
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories PostCategory[]
  tags       PostTag[]
  comments   Comment[]

  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts PostCategory[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts PostTag[]

  @@map("tags")
}

model PostCategory {
  id         String   @id @default(cuid())
  postId     String
  categoryId String
  createdAt  DateTime @default(now())

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  id        String   @id @default(cuid())
  postId    String
  tagId     String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  postId   String
  authorId String
  parentId String?

  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Media {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  alt          String?
  caption      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("media")
}

model Setting {
  id        String      @id @default(cuid())
  key       String      @unique
  value     String
  type      SettingType @default(STRING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("settings")
}

model Visitor {
  id        String   @id @default(cuid())
  ip        String
  userAgent String?
  page      String
  referrer  String?
  createdAt DateTime @default(now())

  @@map("visitors")
}

model ChatSession {
  id          String            @id @default(cuid())
  sessionId   String            @unique
  status      ChatSessionStatus @default(ACTIVE)
  isWithAdmin Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  userId   String?
  adminId  String?
  user     User?         @relation(fields: [userId], references: [id])
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id          String          @id @default(cuid())
  content     String
  type        ChatMessageType @default(TEXT)
  isFromUser  Boolean         @default(true)
  isFromAdmin Boolean         @default(false)
  createdAt   DateTime        @default(now())

  // Relations
  sessionId String
  userId    String?

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User?       @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  PRIVATE
  TRASH
}

enum PostType {
  POST
  PAGE
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
  TRASH
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum ChatSessionStatus {
  ACTIVE
  WAITING_ADMIN
  CLOSED
}

enum ChatMessageType {
  TEXT
  FILE
  EMOJI
  SYSTEM
}
