generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  comments  Comment[]
  chatSessions ChatSession[]

  @@map("users")
}

model Post {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  content       String
  excerpt       String?
  featuredImage String?
  status        PostStatus  @default(DRAFT)
  publishedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  views         Int         @default(0)

  authorId      String
  author        User        @relation(fields: [authorId], references: [id])
  categoryId    String?
  category      Category?   @relation(fields: [categoryId], references: [id])
  
  tags          PostTag[]
  comments      Comment[]

  @@map("posts")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts       Post[]

  @@map("categories")
}

model Tag {
  id        String @id @default(cuid())
  name      String @unique
  slug      String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     PostTag[]

  @@map("tags")
}

model PostTag {
  postId String
  tagId  String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  postId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String?
  author    User?         @relation(fields: [authorId], references: [id])
  
  parentId  String?
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")

  @@map("comments")
}

model Page {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String
  status      PostStatus @default(DRAFT)
  template    String?
  metaTitle   String?
  metaDesc    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("pages")
}

model ChatSession {
  id          String @id @default(cuid())
  sessionId   String @unique
  userId      String?
  user        User?  @relation(fields: [userId], references: [id])
  isActive    Boolean @default(true)
  connectedToAdmin Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  messages    ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id          String @id @default(cuid())
  content     String
  type        MessageType @default(TEXT)
  isFromUser  Boolean
  isFromAdmin Boolean @default(false)
  createdAt   DateTime @default(now())

  sessionId   String
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Visitor {
  id        String   @id @default(cuid())
  ip        String
  userAgent String?
  page      String
  referrer  String?
  createdAt DateTime @default(now())

  @@map("visitors")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string")

  @@map("settings")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  EMOJI
}
